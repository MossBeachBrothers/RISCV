$date
	Sat Aug 10 11:08:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_riscv_core $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 ! clk $end
$var wire 32 # immediate [31:0] $end
$var wire 32 $ next_pc [31:0] $end
$var wire 1 " reset $end
$var wire 1 % zero_flag $end
$var wire 32 & write_data [31:0] $end
$var wire 1 ' stat_reg_write_done $end
$var wire 1 ( stat_mem_write_done $end
$var wire 1 ) stat_mem_read_done $end
$var wire 1 * stat_instruction_fetched $end
$var wire 1 + stat_instruction_decoded $end
$var wire 1 , stat_execution_done $end
$var wire 5 - rs2 [4:0] $end
$var wire 5 . rs1 [4:0] $end
$var wire 32 / read_data [31:0] $end
$var wire 5 0 rd [4:0] $end
$var wire 32 1 pc [31:0] $end
$var wire 1 2 is_store $end
$var wire 1 3 is_r_type $end
$var wire 1 4 is_load $end
$var wire 1 5 is_jump $end
$var wire 1 6 is_i_type $end
$var wire 1 7 is_branch $end
$var wire 32 8 instruction [31:0] $end
$var wire 32 9 alu_result [31:0] $end
$var wire 4 : alu_control [3:0] $end
$var reg 1 ; ctrl_alu_op_enable $end
$var reg 1 < ctrl_branch_enable $end
$var reg 1 = ctrl_decode_enable $end
$var reg 1 > ctrl_instruction_mem_read_enable $end
$var reg 1 ? ctrl_jump_enable $end
$var reg 1 @ ctrl_mem_read_enable $end
$var reg 1 A ctrl_mem_write_enable $end
$var reg 1 B ctrl_pc_update_enable $end
$var reg 1 C ctrl_reg_write_enable $end
$var reg 3 D current_state [2:0] $end
$var reg 3 E next_state [2:0] $end
$var reg 4 F wait_count [3:0] $end
$scope module alu_inst $end
$var wire 1 ! clk $end
$var wire 1 ; ctrl_alu_op_enable $end
$var wire 32 G operand2 [31:0] $end
$var wire 1 " reset $end
$var wire 32 H operand1 [31:0] $end
$var wire 4 I alu_control [3:0] $end
$var reg 32 J result [31:0] $end
$var reg 1 , stat_execution_done $end
$var reg 1 % zero_flag $end
$upscope $end
$scope module idu_inst $end
$var wire 1 ! clk $end
$var wire 1 = ctrl_decode_enable $end
$var wire 1 " reset $end
$var wire 32 K instruction [31:0] $end
$var reg 4 L alu_control [3:0] $end
$var reg 32 M immediate [31:0] $end
$var reg 1 7 is_branch $end
$var reg 1 6 is_i_type $end
$var reg 1 5 is_jump $end
$var reg 1 4 is_load $end
$var reg 1 3 is_r_type $end
$var reg 1 2 is_store $end
$var reg 5 N rd [4:0] $end
$var reg 5 O rs1 [4:0] $end
$var reg 5 P rs2 [4:0] $end
$var reg 1 + stat_instruction_decoded $end
$upscope $end
$scope module ifu_inst $end
$var wire 1 ! clk $end
$var wire 1 > ctr_mem_read_enable $end
$var wire 1 " reset $end
$var wire 32 Q pc [31:0] $end
$var reg 32 R instruction [31:0] $end
$var reg 1 * stat_instruction_fetched $end
$upscope $end
$scope module mau_inst $end
$var wire 32 S address [31:0] $end
$var wire 1 ! clk $end
$var wire 1 @ ctrl_mem_read $end
$var wire 1 A ctrl_mem_write $end
$var wire 32 T write_data [31:0] $end
$var reg 32 U read_data [31:0] $end
$var reg 1 ) stat_mem_read_done $end
$var reg 1 ( stat_mem_write_done $end
$upscope $end
$scope module pc_inst $end
$var wire 1 ! clk $end
$var wire 32 V pc_next [31:0] $end
$var wire 1 B pc_write_enable $end
$var wire 1 " reset $end
$var reg 32 W pc [31:0] $end
$upscope $end
$scope module rf_inst $end
$var wire 1 ! clk $end
$var wire 1 C ctrl_reg_write_enable $end
$var wire 5 X read_reg1 [4:0] $end
$var wire 5 Y read_reg2 [4:0] $end
$var wire 32 Z write_data [31:0] $end
$var wire 5 [ write_reg [4:0] $end
$var reg 32 \ read_data1 [31:0] $end
$var reg 32 ] read_data2 [31:0] $end
$var reg 1 ' stat_reg_write_done $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx ]
bx \
bx [
bx Z
bx Y
bx X
b0 W
bz V
bx U
bx T
b0 S
b0 R
b0 Q
bx P
bx O
bx N
bx M
bx L
b0 K
b0 J
bx I
bx H
bx G
b0 F
bx E
b0 D
0C
0B
0A
0@
0?
0>
0=
0<
0;
bx :
b0 9
b0 8
x7
x6
x5
x4
x3
x2
b0 1
bx 0
bx /
bx .
bx -
0,
0+
0*
x)
x(
x'
bx &
0%
bz $
bx #
1"
0!
$end
#5
bx D
0'
0(
0)
b0 E
b1 F
1!
0"
#10
0!
#15
b0 D
1!
#20
0!
#25
b10 F
1!
#30
0!
#35
b0 F
b1 E
1!
#40
0!
#45
b1 D
b0 E
b1 F
1!
#50
0!
#55
b0 D
b1 E
1>
1!
#60
0!
#65
b1 D
1*
b0 E
b10 F
0>
1!
#70
0!
#75
b0 D
b10 E
1>
1!
#80
0!
#85
b10 D
b0 F
b1 E
0>
1!
#90
0!
#95
b1 D
b10 E
1=
1!
#100
0!
#105
b10 D
1+
b10 :
b10 I
b10 L
05
07
02
04
06
03
b0 M
b0 0
b0 N
b0 [
b0 -
b0 P
b0 Y
b0 .
b0 O
b0 X
1>
0=
1!
#110
0!
#115
0+
b110 E
1=
0>
1!
#120
0!
#125
b110 D
1+
b10 E
1=
1!
#130
0!
#135
b10 D
b11 E
0=
1!
#140
0!
#145
b11 D
0+
b110 E
1=
1!
#150
0!
#155
1+
b110 D
b11 E
0=
1!
#160
0!
#165
b11 D
0+
1!
#170
0!
#175
1!
#180
0!
#185
1!
#190
0!
#195
1!
#200
0!
#205
1!
#210
0!
#215
1!
#220
0!
#225
1!
#230
0!
#235
1!
#240
0!
#245
1!
#250
0!
#255
1!
#260
0!
#265
1!
#270
0!
#275
1!
#280
0!
#285
1!
#290
0!
#295
1!
#300
0!
#305
1!
#310
0!
#315
1!
#320
0!
#325
1!
#330
0!
#335
1!
#340
0!
#345
1!
#350
0!
#355
1!
#360
0!
#365
1!
#370
0!
#375
1!
#380
0!
#385
1!
#390
0!
#395
1!
#400
0!
#405
1!
#410
0!
#415
1!
#420
0!
#425
1!
#430
0!
#435
1!
#440
0!
#445
1!
#450
0!
#455
1!
#460
0!
#465
1!
#470
0!
#475
1!
#480
0!
#485
1!
#490
0!
#495
1!
#500
0!
#505
1!
